{"version":3,"sources":["contexts/reducers/cartReducer.ts","contexts/cart.tsx","components/AddToCart/AddToCart.tsx","components/Product/Product.tsx","config.ts","shared/requester.ts","services/product.service.ts","components/Catalog/Catalog.tsx","services/purchase.service.ts","components/Cart/Cart.tsx","App.tsx","mocks/handlers.js","mocks/browser.js","index.tsx"],"names":["ActionsType","CartReducer","state","action","type","ADD_TO_CART","quantity","payload","product","id","REMOVE_ITEM","newState","EMPTY_CART","CartContext","createContext","displayName","CartActionsContext","useCartContext","useContext","useCartActionsContext","CartContextProvider","children","useReducer","cart","dispatchCart","addItem","dispatch","removeItem","emptyCart","states","actions","useMemo","Provider","value","WrapperComponent","useStyles","makeStyles","theme","controls","display","alignItems","paddingLeft","spacing","AddToCart","classes","useState","currentQuantity","setCurrentQuantity","className","IconButton","aria-label","onClick","Typography","root","margin","details","flexDirection","content","flex","image","width","height","Product","Card","title","name","CardMedia","CardContent","paragraph","variant","memo","apiUrl","api","products","purchase","CustomHeader","this","append","Headers","Requester","url","method","body","headers","JSON","stringify","fetch","init","get","path","post","getProducts","a","result","json","flexGrow","marginTop","Catalog","setProducts","useEffect","Grid","container","map","item","xs","purchaseAsync","ok","empty","padding","Cart","open","onClose","isCommandComplete","setIsCommandComplete","hasError","setHasError","close","Dialog","aria-labelledby","DialogTitle","DialogActions","Button","color","Object","values","length","List","ListItem","ListItemAvatar","Avatar","src","ListItemText","primary","secondary","ListItemIcon","withCartContextProvider","isCartOpen","setIsCartOpen","totalQuantity","reduce","acc","AppBar","position","Toolbar","aria-controls","Badge","badgeContent","Container","maxWidth","props","rest","req","res","ctx","delay","status","setupWorker","handlers","start","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee230e19.chunk.js","sourcesContent":["import { ItemCartType } from 'models/ItemCartType';\r\nimport { ProductApiType } from 'models/ProductApiType';\r\nimport { Dispatch } from 'react';\r\n\r\nenum ActionsType {\r\n  ADD_TO_CART = 'ADD_TO_CART',\r\n  REMOVE_ITEM = 'REMOVE_ITEM',\r\n  EMPTY_CART = 'EMPTY_CART',\r\n}\r\n\r\ntype AddToCartAction = {\r\n  type: ActionsType.ADD_TO_CART;\r\n  payload: {\r\n    product: ProductApiType;\r\n    quantity: number;\r\n  };\r\n};\r\n\r\ntype RemoveItemAction = {\r\n  type: ActionsType.REMOVE_ITEM;\r\n  payload: {\r\n    id: string;\r\n  };\r\n};\r\n\r\ntype EmptyCartAction = {\r\n  type: ActionsType.EMPTY_CART;\r\n};\r\n\r\nexport type CartActions = AddToCartAction | RemoveItemAction | EmptyCartAction;\r\n\r\nexport function CartReducer(state: Record<string, ItemCartType>, action: CartActions): Record<string, ItemCartType> {\r\n  switch (action.type) {\r\n    case ActionsType.ADD_TO_CART: {\r\n      const quantity = state[action.payload.product.id]\r\n        ? state[action.payload.product.id].quantity + action.payload.quantity\r\n        : action.payload.quantity;\r\n\r\n      return {\r\n        ...state,\r\n        [action.payload.product.id]: {\r\n          product: action.payload.product,\r\n          quantity,\r\n        },\r\n      };\r\n    }\r\n\r\n    case ActionsType.REMOVE_ITEM: {\r\n      const newState = { ...state };\r\n      delete newState[action.payload.id];\r\n      return newState;\r\n    }\r\n\r\n    case ActionsType.EMPTY_CART: {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n\r\nexport const addItemWith =\r\n  (dispatch: Dispatch<CartActions>) =>\r\n  (product: ProductApiType, quantity: number): void => {\r\n    dispatch({\r\n      type: ActionsType.ADD_TO_CART,\r\n      payload: {\r\n        product,\r\n        quantity,\r\n      },\r\n    });\r\n  };\r\n\r\nexport const removeItemWith =\r\n  (dispatch: Dispatch<CartActions>) =>\r\n  (id: string): void => {\r\n    dispatch({\r\n      type: ActionsType.REMOVE_ITEM,\r\n      payload: {\r\n        id,\r\n      },\r\n    });\r\n  };\r\n\r\nexport const emptyCartWith = (dispatch: Dispatch<CartActions>) => (): void => {\r\n  dispatch({\r\n    type: ActionsType.EMPTY_CART,\r\n  });\r\n};\r\n","import { ItemCartType } from 'models/ItemCartType';\r\nimport { ProductApiType } from 'models/ProductApiType';\r\nimport React, { createContext, FC, useContext, useMemo, useReducer } from 'react';\r\nimport { addItemWith, CartReducer, emptyCartWith, removeItemWith } from './reducers/cartReducer';\r\n\r\nexport type CartContextType = {\r\n  cart: Record<string, ItemCartType>;\r\n};\r\n\r\nexport type CartActionsContextType = {\r\n  addItem: (product: ProductApiType, quantity: number) => void;\r\n  removeItem: (id: string) => void;\r\n  emptyCart: () => void;\r\n};\r\n\r\nexport const CartContext = createContext<CartContextType>({} as CartContextType);\r\nCartContext.displayName = 'CartContext';\r\n\r\nconst CartActionsContext = createContext<CartActionsContextType>({} as CartActionsContextType);\r\nCartActionsContext.displayName = 'CartActionsContext';\r\n\r\nexport const useCartContext = (): CartContextType => useContext(CartContext);\r\nexport const useCartActionsContext = (): CartActionsContextType => useContext(CartActionsContext);\r\n\r\nexport const CartContextProvider: FC = ({ children }) => {\r\n  const [cart, dispatchCart] = useReducer(CartReducer, {});\r\n\r\n  const addItem = (product: ProductApiType, quantity: number): void => {\r\n    addItemWith(dispatchCart)(product, quantity);\r\n  };\r\n\r\n  const removeItem = (id: string): void => {\r\n    removeItemWith(dispatchCart)(id);\r\n  };\r\n\r\n  const emptyCart = (): void => {\r\n    emptyCartWith(dispatchCart)();\r\n  };\r\n\r\n  const states: CartContextType = { cart };\r\n\r\n  const actions = useMemo<CartActionsContextType>(() => ({ addItem, removeItem, emptyCart }), []);\r\n\r\n  return (\r\n    <CartActionsContext.Provider value={actions}>\r\n      <CartContext.Provider value={states}>{children}</CartContext.Provider>\r\n    </CartActionsContext.Provider>\r\n  );\r\n};\r\n\r\nexport function withCartContextProvider<T>(WrapperComponent: React.ComponentType<T>): React.ComponentType<T> {\r\n  const CartContextContainer: React.ComponentType<T> = (props) => (\r\n    <CartContextProvider>\r\n      <WrapperComponent {...props} />\r\n    </CartContextProvider>\r\n  );\r\n\r\n  return CartContextContainer;\r\n}\r\n","import { ProductApiType } from 'models/ProductApiType';\r\nimport { FC, useState } from 'react';\r\nimport { makeStyles, Typography } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { useCartActionsContext } from 'contexts/cart';\r\n\r\ntype AddToCartPropsType = {\r\n  product: ProductApiType;\r\n  quantity?: number;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  controls: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    paddingLeft: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst AddToCart: FC<AddToCartPropsType> = ({ product, quantity }) => {\r\n  const classes = useStyles();\r\n  const { addItem } = useCartActionsContext();\r\n  const [currentQuantity, setCurrentQuantity] = useState(quantity ?? 0);\r\n\r\n  const remove = () => {\r\n    if (currentQuantity > 0) {\r\n      setCurrentQuantity(currentQuantity - 1);\r\n    }\r\n  };\r\n\r\n  const add = () => {\r\n    if (currentQuantity < 9) {\r\n      setCurrentQuantity(currentQuantity + 1);\r\n    }\r\n  };\r\n\r\n  const addToCart = () => {\r\n    if (currentQuantity > 0) {\r\n      addItem(product, currentQuantity);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.controls}>\r\n      <IconButton aria-label=\"remove\" onClick={remove}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <Typography>{currentQuantity}</Typography>\r\n      <IconButton aria-label=\"add\" onClick={add}>\r\n        <AddIcon />\r\n      </IconButton>\r\n      <IconButton aria-label=\"addToCart\" onClick={addToCart}>\r\n        <AddShoppingCartIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddToCart;\r\n","import { FC, memo } from 'react';\r\nimport { ProductApiType } from 'models/ProductApiType';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport AddToCart from 'components/AddToCart';\r\n\r\ntype ProductPropsType = {\r\n  product: ProductApiType;\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    display: 'flex',\r\n    margin: '1rem',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  content: {\r\n    flex: '1 0 auto',\r\n  },\r\n  image: {\r\n    width: 150,\r\n    height: 150,\r\n  },\r\n}));\r\n\r\nconst Product: FC<ProductPropsType> = ({ product }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root} title={product.name}>\r\n      <CardMedia className={classes.image} image={product.image} />\r\n      <div className={classes.details}>\r\n        <CardContent className={classes.content}>\r\n          <Typography paragraph variant=\"h5\">\r\n            {product.name}\r\n          </Typography>\r\n        </CardContent>\r\n        <AddToCart product={product} />\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default memo(Product);\r\n","/*\r\n  ce fichier simule la configuration de nos routes vers une api fictive\r\n*/\r\n\r\nconst apiUrl = 'http://fakeapi/';\r\n\r\nexport const api = {\r\n  get: {\r\n    products: (): string => `${apiUrl}/products`,\r\n  },\r\n  post: {\r\n    purchase: (): string => `${apiUrl}/purchase`,\r\n  },\r\n};\r\n","class CustomHeader extends Headers {\r\n  public init(): CustomHeader {\r\n    this.append(\"Accept\", \"application/json\");\r\n    this.append(\"Content-Type\", \"application/json\");\r\n    this.append(\"Pragma\", \"no-cache\");\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nclass Requester<TBody = undefined> {\r\n  readonly url: string;\r\n  readonly method?: string;\r\n  readonly body?: string;\r\n  readonly headers: CustomHeader;\r\n\r\n  constructor(url: string, method: string, body?: TBody) {\r\n    this.headers = new CustomHeader();\r\n    this.url = url;\r\n    this.method = method;\r\n    this.body = JSON.stringify(body);\r\n  }\r\n\r\n  public fetch(): Promise<Response> {\r\n    return fetch(this.url, {\r\n      body: this.body,\r\n      headers: this.headers.init(),\r\n      method: this.method,\r\n    });\r\n  }\r\n}\r\n\r\nexport const get = (path: string): Requester => {\r\n  return new Requester(path, \"GET\");\r\n};\r\n\r\nexport const post = <TBody>(path: string, body: TBody): Requester<TBody> => {\r\n  return new Requester<TBody>(path, \"POST\", body);\r\n};\r\n","import { api } from 'config';\r\nimport { ProductApiType } from 'models/ProductApiType';\r\nimport { get } from 'shared/requester';\r\n\r\nexport const getProducts = async (): Promise<ProductApiType[]> => {\r\n  const path = api.get.products();\r\n\r\n  const result = await get(path).fetch();\r\n\r\n  return result.json();\r\n};\r\n","import Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Product from 'components/Product';\r\nimport { ProductApiType } from 'models/ProductApiType';\r\nimport { FC, useEffect, useState, memo } from 'react';\r\nimport { getProducts } from 'services/product.service';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: 10,\r\n  },\r\n}));\r\n\r\nconst Catalog: FC = () => {\r\n  const classes = useStyles();\r\n  const [products, setProducts] = useState<ProductApiType[]>([]);\r\n\r\n  useEffect(() => {\r\n    (async (): Promise<void> => {\r\n      setProducts(await getProducts());\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container className={classes.root} spacing={2}>\r\n      {products.map((product) => (\r\n        <Grid item key={product.id} xs={6}>\r\n          <Product product={product} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default memo(Catalog);\r\n","import { api } from 'config';\r\nimport { ItemCartType } from 'models/ItemCartType';\r\nimport { post } from 'shared/requester';\r\n\r\nexport const purchaseAsync = async (cart: Record<string, ItemCartType>): Promise<boolean> => {\r\n  const path = api.post.purchase();\r\n\r\n  const result = await post(path, cart).fetch();\r\n\r\n  return result.ok;\r\n};\r\n","import { makeStyles } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useCartActionsContext, useCartContext } from 'contexts/cart';\r\nimport { FC, useState } from 'react';\r\nimport { purchaseAsync } from 'services/purchase.service';\r\n\r\ntype CartPropsType = {\r\n  open: boolean;\r\n  onClose: () => void;\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  empty: {\r\n    padding: '0 2rem',\r\n  },\r\n  item: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst Cart: FC<CartPropsType> = ({ open, onClose }) => {\r\n  const classes = useStyles();\r\n  const { cart } = useCartContext();\r\n  const { removeItem, emptyCart } = useCartActionsContext();\r\n  const [isCommandComplete, setIsCommandComplete] = useState(false);\r\n  const [hasError, setHasError] = useState(false);\r\n\r\n  const retry = () => {\r\n    setIsCommandComplete(false);\r\n    setHasError(false);\r\n  };\r\n\r\n  const purchase = async () => {\r\n    const isPurchaseOk = await purchaseAsync(cart);\r\n    if (isPurchaseOk) {\r\n      emptyCart();\r\n      setIsCommandComplete(true);\r\n    } else {\r\n      setHasError(true);\r\n    }\r\n  };\r\n\r\n  const close = () => {\r\n    onClose();\r\n    setIsCommandComplete(false);\r\n    setHasError(false);\r\n  };\r\n\r\n  if (hasError) {\r\n    return (\r\n      <Dialog aria-labelledby=\"cart\" open={open} onClose={close}>\r\n        <DialogTitle id=\"cart\">Une erreur est survenue. Veuillez reéessayer.</DialogTitle>\r\n        <DialogActions>\r\n          <Button onClick={retry} variant=\"contained\" color=\"primary\">\r\n            Réessayer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  if (isCommandComplete) {\r\n    return (\r\n      <Dialog aria-labelledby=\"cart\" open={open} onClose={close}>\r\n        <DialogTitle id=\"cart\">Votre commande est terminée. Merci pour votre achat.</DialogTitle>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Dialog aria-labelledby=\"cart\" open={open} onClose={close}>\r\n      <DialogTitle id=\"cart\">Panier</DialogTitle>\r\n      {Object.values(cart).length === 0 ? (\r\n        <Typography paragraph className={classes.empty}>\r\n          Le panier est vide\r\n        </Typography>\r\n      ) : (\r\n        <>\r\n          <List>\r\n            {Object.values(cart).map((item) => (\r\n              <ListItem key={item.product.id}>\r\n                <ListItemAvatar>\r\n                  <Avatar src={item.product.image} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  className={classes.item}\r\n                  primary={item.product.name}\r\n                  secondary={`quantité : ${item.quantity}`}\r\n                />\r\n                <ListItemIcon>\r\n                  <IconButton onClick={() => removeItem(item.product.id)} aria-label=\"remove\">\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </ListItemIcon>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <DialogActions>\r\n            <Button onClick={purchase} variant=\"contained\" color=\"primary\" aria-label=\"purchase\">\r\n              Commander\r\n            </Button>\r\n          </DialogActions>\r\n        </>\r\n      )}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import Catalog from 'components/Catalog';\r\nimport { FC, useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { useCartContext, withCartContextProvider } from 'contexts/cart';\r\nimport Cart from 'components/Cart';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst App: FC = () => {\r\n  const classes = useStyles();\r\n  const { cart } = useCartContext();\r\n  const [isCartOpen, setIsCartOpen] = useState(false);\r\n\r\n  const totalQuantity = cart && Object.values(cart).reduce((acc, item) => acc + item.quantity, 0);\r\n\r\n  const openCart = () => {\r\n    setIsCartOpen(true);\r\n  };\r\n\r\n  const closeCart = () => {\r\n    setIsCartOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Shop Example\r\n          </Typography>\r\n          <IconButton aria-label=\"open-cart\" color=\"inherit\" aria-controls=\"menu-appbar\" onClick={openCart}>\r\n            <Badge badgeContent={totalQuantity} color=\"secondary\">\r\n              <ShoppingCartIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"md\">\r\n        <Catalog />\r\n      </Container>\r\n      <Cart open={isCartOpen} onClose={closeCart} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withCartContextProvider(App);\r\n","import { rest } from 'msw';\r\nimport { api } from 'config';\r\nimport products from './responses/products.json';\r\n\r\nexport default [\r\n  rest.get(api.get.products(), (req, res, ctx) => {\r\n    return res(ctx.delay(0), ctx.status(200), ctx.json(products));\r\n  }),\r\n  rest.post(api.post.purchase(), (req, res, ctx) => {\r\n    return res(ctx.delay(0), ctx.status(200));\r\n  }),\r\n];\r\n","import { setupWorker } from \"msw\";\r\nimport handlers from \"./handlers\";\r\nconst worker = setupWorker(...handlers);\r\n\r\nexport { worker };\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { worker } from 'mocks/browser';\r\n\r\nworker.start();\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}